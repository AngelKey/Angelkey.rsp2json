// Generated by IcedCoffeeScript 1.6.3-g
(function() {
  var Parser, iced, __iced_k, __iced_k_noop;

  iced = require('iced-coffee-script').iced;
  __iced_k = __iced_k_noop = function() {};

  exports.Parser = Parser = (function() {
    function Parser(src) {
      this.src = src;
    }

    Parser.prototype.parse = function(cb) {
      var clusters, header, records, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      records = [];
      (function(__iced_k) {
        var _results, _while;
        _results = [];
        _while = function(__iced_k) {
          var _break, _continue, _next;
          _break = function() {
            return __iced_k(_results);
          };
          _continue = function() {
            return iced.trampoline(function() {
              return _while(__iced_k);
            });
          };
          _next = function(__iced_next_arg) {
            _results.push(__iced_next_arg);
            return _continue();
          };
          if (!!_this.src.eof()) {
            return _break();
          } else {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "src/parser.iced",
                funcname: "Parser.parse"
              });
              _this.parse_header(__iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    return header = arguments[0];
                  };
                })(),
                lineno: 14
              }));
              __iced_deferrals._fulfill();
            })(function() {
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "src/parser.iced",
                  funcname: "Parser.parse"
                });
                _this.parse_clusters(__iced_deferrals.defer({
                  assign_fn: (function() {
                    return function() {
                      return clusters = arguments[0];
                    };
                  })(),
                  lineno: 15
                }));
                __iced_deferrals._fulfill();
              })(function() {
                return _next(records.push({
                  header: header,
                  clusters: clusters
                }));
              });
            });
          }
        };
        _while(__iced_k);
      })(function() {
        return cb(records);
      });
    };

    Parser.prototype.eat_empty_lines = function(cb) {
      var go, line, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      go = true;
      (function(__iced_k) {
        var _results, _while;
        _results = [];
        _while = function(__iced_k) {
          var _break, _continue, _next;
          _break = function() {
            return __iced_k(_results);
          };
          _continue = function() {
            return iced.trampoline(function() {
              return _while(__iced_k);
            });
          };
          _next = function(__iced_next_arg) {
            _results.push(__iced_next_arg);
            return _continue();
          };
          if (!go) {
            return _break();
          } else {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "src/parser.iced",
                funcname: "Parser.eat_empty_lines"
              });
              _this.src.peek(__iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    return line = arguments[0];
                  };
                })(),
                lineno: 24
              }));
              __iced_deferrals._fulfill();
            })(function() {
              return _next((typeof line !== "undefined" && line !== null ? line.is_empty() : void 0) ? _this.src.consume() : go = false);
            });
          }
        };
        _while(__iced_k);
      })(function() {
        return cb();
      });
    };

    Parser.prototype.parse_header = function(cb) {
      var go, header, line, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/parser.iced",
          funcname: "Parser.parse_header"
        });
        _this.eat_empty_lines(__iced_deferrals.defer({
          lineno: 32
        }));
        __iced_deferrals._fulfill();
      })(function() {
        header = {};
        go = true;
        (function(__iced_k) {
          var _results, _while;
          _results = [];
          _while = function(__iced_k) {
            var _break, _continue, _next;
            _break = function() {
              return __iced_k(_results);
            };
            _continue = function() {
              return iced.trampoline(function() {
                return _while(__iced_k);
              });
            };
            _next = function(__iced_next_arg) {
              _results.push(__iced_next_arg);
              return _continue();
            };
            if (!go) {
              return _break();
            } else {
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "src/parser.iced",
                  funcname: "Parser.parse_header"
                });
                _this.src.peek(__iced_deferrals.defer({
                  assign_fn: (function() {
                    return function() {
                      return line = arguments[0];
                    };
                  })(),
                  lineno: 36
                }));
                __iced_deferrals._fulfill();
              })(function() {
                return _next((typeof line !== "undefined" && line !== null ? line.is_header() : void 0) ? (_this.src.consume(), header[line.key()] = line.value()) : go = false);
              });
            }
          };
          _while(__iced_k);
        })(function() {
          return cb(header);
        });
      });
    };

    Parser.prototype.parse_clusters = function(cb) {
      var cluster, go, res, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      res = [];
      go = true;
      (function(__iced_k) {
        var _results, _while;
        _results = [];
        _while = function(__iced_k) {
          var _break, _continue, _next;
          _break = function() {
            return __iced_k(_results);
          };
          _continue = function() {
            return iced.trampoline(function() {
              return _while(__iced_k);
            });
          };
          _next = function(__iced_next_arg) {
            _results.push(__iced_next_arg);
            return _continue();
          };
          if (!go) {
            return _break();
          } else {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "src/parser.iced",
                funcname: "Parser.parse_clusters"
              });
              _this.parse_cluster(__iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    return cluster = arguments[0];
                  };
                })(),
                lineno: 49
              }));
              __iced_deferrals._fulfill();
            })(function() {
              return _next(typeof cluster !== "undefined" && cluster !== null ? res.push(cluster) : go = false);
            });
          }
        };
        _while(__iced_k);
      })(function() {
        return cb(res);
      });
    };

    Parser.prototype.parse_cluster = function(cb) {
      var cluster, found, go, line, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/parser.iced",
          funcname: "Parser.parse_cluster"
        });
        _this.eat_empty_lines(__iced_deferrals.defer({
          lineno: 57
        }));
        __iced_deferrals._fulfill();
      })(function() {
        cluster = {};
        go = true;
        (function(__iced_k) {
          var _results, _while;
          _results = [];
          _while = function(__iced_k) {
            var _break, _continue, _next;
            _break = function() {
              return __iced_k(_results);
            };
            _continue = function() {
              return iced.trampoline(function() {
                return _while(__iced_k);
              });
            };
            _next = function(__iced_next_arg) {
              _results.push(__iced_next_arg);
              return _continue();
            };
            if (!go) {
              return _break();
            } else {
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "src/parser.iced",
                  funcname: "Parser.parse_cluster"
                });
                _this.src.peek(__iced_deferrals.defer({
                  assign_fn: (function() {
                    return function() {
                      return line = arguments[0];
                    };
                  })(),
                  lineno: 61
                }));
                __iced_deferrals._fulfill();
              })(function() {
                return _next((typeof line !== "undefined" && line !== null ? line.is_data() : void 0) ? (_this.src.consume(), cluster[line.key()] = line.value(), found = true) : go = false);
              });
            }
          };
          _while(__iced_k);
        })(function() {
          if (!found) {
            cluster = null;
          }
          return cb(cluster);
        });
      });
    };

    return Parser;

  })();

}).call(this);
